                                    RAG Chatbot Solution Architecture

┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│  Client Website │────▶│   CloudFront    │────▶│   S3 Bucket     │
│  with Embedded  │     │   Distribution  │     │   (Frontend     │
│  Widget         │     │   (Global CDN)  │     │   Assets)       │
│                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
          │
          │ API Requests (REST + WebSocket)
          ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│   AWS WAF       │────▶│   API Gateway   │────▶│   Lambda        │
│   (DDoS/Bot     │     │   (REST + WS)   │     │   (Chat Logic)  │
│   Protection)   │     │   Rate Limiting │     │   with Streaming│
│                 │     │   API Keys      │     │   Nova Lite     │
└─────────────────┘     └─────────────────┘     └─────────────────┘
                                                          │
                                                          │ Vector Search
                                                          ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│   S3 Bucket     │◀────│   Lambda        │────▶│   Amazon        │
│   (Vector       │     │   (Document     │     │   Bedrock       │
│   Embeddings)   │     │   Processor)    │     │   • Nova Lite   │
│   Custom Vector │     │   Sync Process  │     │   • Titan Embed │
│   Implementation│     │                 │     │   • Guardrails  │
└─────────────────┘     └─────────────────┘     └─────────────────┘
          ▲                       ▲
          │                       │
          │ Store Embeddings      │ Process Documents
          │ (JSON Format)         │ (Synchronous)
          │                       │
          │               ┌─────────────────┐     ┌─────────────────┐
          │               │                 │     │                 │
          └───────────────│   S3 Bucket     │◀────│   Amazon        │
                          │   (Documents)   │     │   Textract      │
                          │   Multi-format  │     │   (OCR/Extract) │
                          │   Support       │     │                 │
                          └─────────────────┘     └─────────────────┘

┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│   S3 Bucket     │     │   In-Memory     │     │   CloudWatch    │
│   (Metadata     │     │   Cache         │     │   (Monitoring   │
│   Storage)      │     │   (Response     │     │   & Logging)    │
│                 │     │   Caching)      │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘

## Architecture Flow

1. **User Interaction**: Client website loads the embedded chatbot widget
2. **Content Delivery**: CloudFront serves static assets globally with low latency
3. **Security Layer**: AWS WAF filters malicious requests and enforces rate limits
4. **API Processing**: API Gateway handles REST and WebSocket connections
5. **Chat Logic**: Lambda functions process chat requests using Amazon Nova Lite
6. **Document Retrieval**: Vector search finds relevant document chunks from S3
7. **AI Generation**: Bedrock generates contextual responses with guardrails
8. **Real-time Delivery**: Responses stream back to users via WebSocket or REST

## Key Components

### Frontend Layer
- **Embeddable Widget**: JavaScript widget for easy website integration
- **CloudFront CDN**: Global content delivery with edge caching
- **S3 Static Hosting**: Reliable storage for frontend assets

### Security & API Layer
- **AWS WAF**: DDoS protection, bot filtering, and rate limiting
- **API Gateway**: Managed REST and WebSocket APIs with authentication
- **Lambda Authorizers**: Custom authentication and authorization logic

### Processing Layer
- **Chat Lambda**: Handles user queries with streaming responses
- **Document Processor**: Processes and indexes uploaded documents
- **Vector Search**: Custom S3-based vector similarity search

### Storage Layer
- **Document Storage**: S3 bucket for original documents (PDF, Word, etc.)
- **Vector Storage**: S3 bucket for document embeddings and metadata
- **Response Cache**: In-memory caching for improved performance

### AI & ML Services
- **Amazon Bedrock Nova Lite**: Fast, cost-effective language model
- **Amazon Titan Embeddings**: Document vectorization service
- **Amazon Textract**: OCR and document text extraction
- **Bedrock Guardrails**: Content safety and filtering

### Monitoring & Operations
- **CloudWatch**: Comprehensive logging, metrics, and dashboards
- **X-Ray Tracing**: Distributed request tracing and performance analysis
- **Cost Explorer**: Usage tracking and cost optimization insights
